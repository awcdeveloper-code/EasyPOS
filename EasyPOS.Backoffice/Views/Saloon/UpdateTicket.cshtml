@model dynamic
@{
    var categories = new List<dynamic> {
        new { Id = 1, Name = "Beverages" },
        new { Id = 2, Name = "Soft Drinks" },
        new { Id = 3, Name = "Beers" },
        new { Id = 4, Name = "Liquors" },
        new { Id = 5, Name = "Meals" }
    };
    var categoryItems = new Dictionary<int, List<dynamic>> {
        { 1, new List<dynamic> {
            new { Id = 101, Name = "Coke", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Coke" },
            new { Id = 102, Name = "Pepsi", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Pepsi" },
            new { Id = 103, Name = "7 Eleven", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=7+Eleven" }
        }},
        { 2, new List<dynamic> {
            new { Id = 201, Name = "Fanta", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Fanta" },
            new { Id = 202, Name = "Sprite", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Sprite" }
        }},
        { 3, new List<dynamic> {
            new { Id = 301, Name = "Heineken", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Heineken" },
            new { Id = 302, Name = "Budweiser", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Budweiser" }
        }},
        { 4, new List<dynamic> {
            new { Id = 401, Name = "Whiskey", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Whiskey" },
            new { Id = 402, Name = "Vodka", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Vodka" }
        }},
        { 5, new List<dynamic> {
            new { Id = 501, Name = "Burger", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Burger" },
            new { Id = 502, Name = "Pizza", ImageUrl = "https://placehold.co/64x64/0891b2/ffffff?text=Pizza" }
        }},
    };
}

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Selección de Productos</title>
    <style>
        *, *::before, *::after {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            background: #ffffff;
            color: #374151;
            line-height: 1.5;
            font-size: 16px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .container {
            display: flex;
            flex-grow: 1;
            padding: 24px;
            gap: 24px;
            max-width: 1200px;
            margin: 0 auto;
            flex-wrap: wrap;
            min-height: 500px;
        }

        .panel-left {
            flex: 0 0 280px;
            background: #f9fafb;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.08);
            padding: 16px;
            display: flex;
            flex-direction: column;
            align-items: stretch;
        }

            .panel-left h2 {
                font-weight: 700;
                font-size: 1.5rem;
                margin-bottom: 16px;
                color: #111827;
                border-bottom: 1px solid #e5e7eb;
                padding-bottom: 8px;
            }

        .category-button {
            background: #e0e7ff;
            border: none;
            border-radius: 10px;
            padding: 12px 16px;
            margin-bottom: 12px;
            font-size: 1rem;
            font-weight: 600;
            color: #4338ca;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: background-color 0.3s ease;
            user-select: none;
        }

            .category-button:hover,
            .category-button:focus {
                background: #c7d2fe;
                outline: none;
            }

            .category-button.active {
                background: darkblue;
                color: #e0e7ff;
                box-shadow: 0 0 10px #4338caaa;
            }

        .panel-middle {
            flex: 1 1 auto;
            background: #f9fafb;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.08);
            padding: 16px;
            display: flex;
            flex-direction: column;
            min-width: 320px;
            max-height: 600px;
            overflow-y: auto;
        }

            .panel-middle h2 {
                font-weight: 700;
                font-size: 1.5rem;
                margin-bottom: 16px;
                color: #111827;
                border-bottom: 1px solid #e5e7eb;
                padding-bottom: 8px;
            }

        table.middle-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 10px;
        }

            table.middle-table th,
            table.middle-table td {
                text-align: left;
                padding: 12px 8px;
                vertical-align: middle;
            }

            table.middle-table th {
                font-weight: 600;
                font-size: 1rem;
                color: #4b5563;
                border-bottom: 2px solid #d1d5db;
            }

            table.middle-table tbody tr {
                background: #ffffff;
                border-radius: 12px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                cursor: pointer;
                transition: background-color 0.2s ease;
                user-select: none;
            }

                table.middle-table tbody tr:hover {
                    background: #e0e7ff;
                }

                table.middle-table tbody tr.selected {
                    background: #4338ca;
                    color: #e0e7ff;
                    box-shadow: 0 0 10px #4338caaa;
                }

        .item-image {
            width: 48px;
            height: 48px;
            border-radius: 8px;
            object-fit: cover;
            margin-right: 12px;
            vertical-align: middle;
        }

        .item-name-cell {
            display: flex;
            align-items: center;
        }

        .panel-right {
            flex: 0 0 320px;
            background: #f9fafb;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.08);
            padding: 16px;
            display: flex;
            flex-direction: column;
            min-width: 280px;
            max-height: 600px;
            overflow-y: auto;
        }

            .panel-right h2 {
                font-weight: 700;
                font-size: 1.5rem;
                margin-bottom: 16px;
                color: #111827;
                border-bottom: 1px solid #e5e7eb;
                padding-bottom: 8px;
            }

        table.right-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 10px;
        }

            table.right-table th,
            table.right-table td {
                text-align: left;
                padding: 12px 8px;
                vertical-align: middle;
            }

            table.right-table th {
                font-weight: 600;
                font-size: 1rem;
                color: #4b5563;
                border-bottom: 2px solid #d1d5db;
            }

            table.right-table tbody tr {
                background: #ffffff;
                border-radius: 12px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                user-select: none;
            }

        .quantity-input {
            width: 60px;
            padding: 6px;
            font-size: 1rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            text-align: center;
            -moz-appearance: textfield;
        }

            .quantity-input::-webkit-inner-spin-button,
            .quantity-input::-webkit-outer-spin-button {
                -webkit-appearance: none;
                margin: 0;
            }

        .remove-btn {
            background: none;
            border: none;
            color: #dc2626;
            cursor: pointer;
            font-size: 24px;
            vertical-align: middle;
            padding: 4px;
            border-radius: 6px;
            transition: background-color 0.3s;
        }

            .remove-btn:hover,
            .remove-btn:focus {
                background-color: #fee2e2;
                outline: none;
            }

        .submit-btn {
            align-self: flex-end;
            margin-top: 16px;
            padding: 12px 24px;
            font-size: 1rem;
            font-weight: 700;
            color: #fff;
            background-color: #4338ca;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            user-select: none;
        }

            .submit-btn:hover,
            .submit-btn:focus {
                background-color: #3730a3;
                outline: none;
            }
        @@media (max-width: 900px) {
            .container

        {
            flex-direction: column;
        }

        .panel-left, .panel-right, .panel-middle {
            flex: 1 1 auto;
            max-height: none;
            min-width: auto;
            width: 100%;
        }

        .panel-left, .panel-right {
            order: 0;
        }

        .panel-middle {
            order: 1;
            margin: 24px 0;
        }

        }
    </style>
</head>
<body>
    <header role="banner" style="padding: 16px 24px; background: darkblue; color:#e0e7ff; font-weight:700; font-size:1.75rem; position: sticky; top: 0; z-index: 10; user-select:none;">
        Selección de Productos
    </header>

    <main class="container" role="main" aria-label="Category and item selection panels">
        <!-- Left Panel -->
        <section class="panel-left" aria-label="Category selection">
            <h2>Categorias</h2>
            @foreach (var category in categories)
            {
                <button type="button" class="category-button" data-category-id="@category.Id" aria-pressed="false" tabindex="0">
                    <span>@category.Name</span>
                    <span class="material-icons" aria-hidden="true">chevron_right</span>
                </button>
            }
        </section>

        <!-- Middle Panel -->
        <section class="panel-middle" aria-label="Productos de la Categoría">
            <h2 id="middleTitle">Productos</h2>
            <table class="middle-table" aria-describedby="middleTitle" role="grid" aria-live="polite" aria-relevant="additions removals">
                <tbody id="middleTableBody">
                    <!-- Items loaded dynamically -->
                </tbody>
            </table>
        </section>

        <!-- Right Panel with form to submit -->
        <section class="panel-right" aria-label="Selected items">
            <h2 id="rightTitle">Productos Seleccionados</h2>
            <form id="selectedItemsForm" method="post" action="/submitselecteditems" novalidate>
                <table class="right-table" aria-describedby="rightTitle" role="grid">
                    <thead>
                        <tr>
                            <th scope="col">Producto</th>
                            <th scope="col" style="width: 80px; text-align:center;">Cantidad</th>
                            <th scope="col" style="width: 40px;"></th>
                        </tr>
                    </thead>
                    <tbody id="rightTableBody">
                        <!-- Selected items here -->
                    </tbody>
                </table>
                <input type="hidden" name="selectedItemsJson" id="selectedItemsJson" />
                <button type="submit" class="btn btn-primary" aria-label="Submit selected items with quantities">Procesar Orden</button>
            </form>
        </section>
    </main>

    <script>
        (() => {
            "use strict";

            // Data from server side
            const categoryItems = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(categoryItems));

            // DOM references
            const categoryButtons = document.querySelectorAll('.category-button');
            const middleTableBody = document.getElementById('middleTableBody');
            const rightTableBody = document.getElementById('rightTableBody');
            const middleTitle = document.getElementById('middleTitle');
            const selectedItemsForm = document.getElementById('selectedItemsForm');
            const selectedItemsInput = document.getElementById('selectedItemsJson');

            // Current state
            let selectedCategoryId = null;

            // Selected items map: key = itemId, value = { item, quantity }
            const selectedItems = new Map();

            function clearTableBody(tbody) {
                while(tbody.firstChild) {
                    tbody.removeChild(tbody.firstChild);
                }
            }

            function renderMiddleItems(categoryId) {
                clearTableBody(middleTableBody);

                const items = categoryItems[categoryId] || [];
                if(items.length === 0) {
                    const noRow = document.createElement('tr');
                    const tdNo = document.createElement('td');
                    tdNo.textContent = "No items available";
                    tdNo.style.fontStyle = "italic";
                    noRow.appendChild(tdNo);
                    middleTableBody.appendChild(noRow);
                    middleTitle.textContent = "Productos";
                    return;
                }

                middleTitle.textContent = `${getCategoryNameById(categoryId)}`;

                items.forEach(item => {
                    const row = document.createElement('tr');
                    row.setAttribute('role', 'row');
                    row.tabIndex = 0;
                    row.dataset.itemId = item.Id;

                    if(selectedItems.has(item.Id)) {
                        row.classList.add('selected');
                    }

                    row.addEventListener('click', () => {
                        handleItemSelection(item, row);
                    });

                    row.addEventListener('keydown', (e) => {
                        if(e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            handleItemSelection(item, row);
                        }
                    });

                    const tdName = document.createElement('td');
                    tdName.className = "item-name-cell";

                    const img = document.createElement('img');
                    img.src = item.ImageUrl;
                    img.alt = item.Name + " image";
                    img.className = "item-image";
                    img.onerror = () => {
                        img.src = "https://placehold.co/64x64/444444/ffffff?text=No+Image";
                    };

                    const spanName = document.createElement('span');
                    spanName.textContent = item.Name;

                    tdName.appendChild(img);
                    tdName.appendChild(spanName);

                    row.appendChild(tdName);
                    middleTableBody.appendChild(row);
                });
            }

            function getCategoryNameById(id) {
                const btn = document.querySelector('.category-button[data-category-id="'+id+'"]');
                if (!btn) return "";
                const nameSpan = btn.querySelector('span');
                return nameSpan ? nameSpan.textContent.trim() : "";
            }

            function handleItemSelection(item, row) {
                if(selectedItems.has(item.Id)) {
                    selectedItems.delete(item.Id);
                    row.classList.remove('selected');
                    renderRightTable();
                } else {
                    promptQuantity(item, quantity => {
                        if(quantity > 0) {
                            selectedItems.set(item.Id, { item: item, quantity: quantity });
                            row.classList.add('selected');
                            renderRightTable();
                        }
                    });
                }
            }

            function promptQuantity(item, callback) {
                let qtyStr = prompt(`Ingrese la cantidad para for "${item.Name}":`, "1");
                if(qtyStr === null) {
                    return;
                }
                qtyStr = qtyStr.trim();
                const qtyNum = parseInt(qtyStr, 10);
                if (isNaN(qtyNum) || qtyNum < 1) {
                    alert("La cantidad debe ser un valor válido...Usando Cantidad = 1.");
                    callback(1);
                    return;
                }
                callback(qtyNum);
            }

            function renderRightTable() {
                clearTableBody(rightTableBody);
                if(selectedItems.size === 0) {
                    const noRow = document.createElement('tr');
                    const tdNo = document.createElement('td');
                    tdNo.setAttribute('colspan', '3');
                    tdNo.textContent = "No items selected";
                    tdNo.style.fontStyle = "italic";
                    tdNo.style.textAlign = "center";
                    noRow.appendChild(tdNo);
                    rightTableBody.appendChild(noRow);
                    return;
                }
                selectedItems.forEach(({ item, quantity }) => {
                    const row = document.createElement('tr');
                    row.setAttribute('role', 'row');

                    const tdName = document.createElement('td');
                    tdName.className = "item-name-cell";

                    const img = document.createElement('img');
                    img.src = item.ImageUrl;
                    img.alt = item.Name + " image";
                    img.className = "item-image";
                    img.onerror = () => {
                        img.src = "https://placehold.co/64x64/444444/ffffff?text=No+Image";
                    };

                    const spanName = document.createElement('span');
                    spanName.textContent = item.Name;

                    tdName.appendChild(img);
                    tdName.appendChild(spanName);

                    const tdQty = document.createElement('td');
                    tdQty.style.textAlign = 'center';
                    const qtyInput = document.createElement('input');
                    qtyInput.type = 'number';
                    qtyInput.min = '1';
                    qtyInput.className = 'quantity-input';
                    qtyInput.value = quantity;
                    qtyInput.setAttribute('aria-label', `Quantity for ${item.Name}`);

                    qtyInput.addEventListener('change', (e) => {
                        let val = parseInt(e.target.value, 10);
                        if(isNaN(val) || val < 1) {
                            alert("Por favor, ingrese una cantidad válida (1 o más).");
                            e.target.value = selectedItems.get(item.Id).quantity;
                            return;
                        }
                        selectedItems.get(item.Id).quantity = val;
                    });

                    tdQty.appendChild(qtyInput);

                    const tdRemove = document.createElement('td');
                    tdRemove.style.textAlign = 'center';
                    const btnRemove = document.createElement('button');
                    btnRemove.className = 'remove-btn';
                    btnRemove.setAttribute('aria-label', `Remove ${item.Name} from selected items`);
                    btnRemove.title = `Remove ${item.Name}`;
                    btnRemove.innerHTML = '<span class="material-icons">delete</span>';
                    btnRemove.addEventListener('click', () => {
                        selectedItems.delete(item.Id);
                        updateMiddleSelection(item.Id);
                        renderRightTable();
                    });
                    tdRemove.appendChild(btnRemove);

                    row.appendChild(tdName);
                    row.appendChild(tdQty);
                    row.appendChild(tdRemove);

                    rightTableBody.appendChild(row);
                });
            }

            function updateMiddleSelection(itemId) {
                const row = middleTableBody.querySelector('tr[data-item-id="'+itemId+'"]');
                if(row) {
                    row.classList.remove('selected');
                }
            }

            categoryButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const catId = button.dataset.categoryId;
                    selectCategory(catId);
                });
                button.addEventListener('keydown', (e) => {
                    if(e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        const catId = button.dataset.categoryId;
                        selectCategory(catId);
                    }
                });
            });

            function selectCategory(catId) {
                if(selectedCategoryId === catId) return;
                selectedCategoryId = catId;

                categoryButtons.forEach(btn => {
                    if(btn.dataset.categoryId === catId) {
                        btn.classList.add('active');
                        btn.setAttribute('aria-pressed', 'true');
                    } else {
                        btn.classList.remove('active');
                        btn.setAttribute('aria-pressed', 'false');
                    }
                });

                renderMiddleItems(catId);
            }

            // Form submit handler - serialize selectedItems to hidden input
            selectedItemsForm.addEventListener('submit', function(e) {
                if(selectedItems.size === 0) {
                    alert("Please select at least one item before submitting.");
                    e.preventDefault();
                    return;
                }

                // Create an array of { id, quantity }
                const submissionArray = [];
                selectedItems.forEach(({ item, quantity }) => {
                    submissionArray.push({ id: item.Id, quantity: quantity });
                });
                selectedItemsInput.value = JSON.stringify(submissionArray);
                // The form will submit normally with this data in the hidden input
            });

            if(categoryButtons.length > 0) {
                selectCategory(categoryButtons[0].dataset.categoryId);
            }

        })();
    </script>
</body>
</html>
